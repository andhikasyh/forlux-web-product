---
import { currentLanguage } from '../../stores/languageStore';
import { translations } from '../../utils/translations';

// Initial language value for SSR
const initialLang = currentLanguage.get();

const architectureComponents = [
  {
    id: "edge",
    gradient: "from-forlux-orange-primary to-forlux-orange-secondary",
    itemCount: 4
  },
  {
    id: "network",
    gradient: "from-forlux-green-primary to-forlux-green-secondary",
    itemCount: 4
  },
  {
    id: "control",
    gradient: "from-forlux-orange-secondary to-forlux-orange-accent",
    itemCount: 4
  }
];
---

<section class="relative py-32" id="system-architecture">
  <div class="container mx-auto px-4 max-w-7xl">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
      <!-- Left Content -->
      <div class="space-y-16">
        <!-- Header Section -->
        <div 
          data-aos="fade-up" 
          data-aos-duration="1000"
          class="relative"
        >
          <span 
            class="text-forlux-green-primary text-lg font-medium mb-4 block hover:-translate-y-1 transition-transform duration-300"
            id="architecture-label"
          >
            {translations[initialLang].features.architecture.label}
          </span>
          
          <h2 
            class="text-5xl font-bold mb-6 text-white relative z-10"
            id="architecture-title"
          >
            {translations[initialLang].features.architecture.title}
          </h2>
          <!-- Decorative gradient blur -->
          <div class="absolute -left-10 -top-10 w-72 h-72 bg-forlux-green-primary/20 rounded-full blur-3xl -z-10"></div>
        </div>

        <!-- Features List -->
        <div class="space-y-12">
          {architectureComponents.map((component, index) => (
            <div 
              class="group p-6 rounded-2xl hover:bg-white/5 transition-all duration-500"
              data-aos="fade-right"
              data-aos-duration="1000"
              data-aos-delay={index * 200}
            >
              <div class="space-y-4">
                <h3 
                  class={`text-2xl font-bold bg-gradient-to-r ${component.gradient} 
                         bg-clip-text text-transparent group-hover:scale-105 transition-transform duration-300`}
                  id={`title-${component.id}`}
                >
                  {translations[initialLang].features.architecture[component.id].title}
                </h3>
                
                <p 
                  class="text-slate-400 text-base leading-relaxed max-w-lg group-hover:text-slate-300 transition-colors duration-300"
                  id={`description-${component.id}`}
                >
                  {translations[initialLang].features.architecture[component.id].description}
                </p>

                <!-- Items Grid -->
                <div class="grid grid-cols-2 gap-4 mt-6">
                  {translations[initialLang].features.architecture[component.id].items.map((item, itemIndex) => (
                    <div 
                      class="flex items-center space-x-2"
                      id={`item-${component.id}-${itemIndex}`}
                    >
                      <span class={`w-1.5 h-1.5 rounded-full bg-gradient-to-r ${component.gradient}`}></span>
                      <span class="text-sm text-slate-400 group-hover:text-slate-300 transition-colors duration-300">
                        {item}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        <p 
          class="text-slate-400 text-base max-w-lg hover:text-slate-300 transition-colors duration-300"
          id="architecture-description"
          data-aos="fade-up"
          data-aos-duration="1000"
          data-aos-delay="600"
        >
          {translations[initialLang].features.architecture.description}
        </p>
      </div>

      <!-- Right Image -->
      <div class="relative" data-aos="zoom-in" data-aos-duration="1500">
        <div class="relative w-[540px] h-[540px] mx-auto transform hover:scale-105 transition-transform duration-700">
          <!-- Background Glow -->
          <div class="absolute inset-0 bg-gradient-radial from-forlux-orange-primary/20 via-transparent to-transparent opacity-50 blur-3xl -z-10 animate-pulse-slow"></div>
          
          <!-- Image Container -->
          <div class="relative w-full h-full rounded-[2.5rem] overflow-hidden bg-slate-900/30 hover:bg-slate-900/40 transition-colors duration-300">
            <img 
              src="/structure-scale.jpg" 
              alt="System Architecture Visualization" 
              class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-700"
              loading="lazy"
            />
            <!-- Overlay gradient animation -->
            <div class="absolute inset-0 bg-gradient-to-br from-forlux-orange-primary/10 to-forlux-green-primary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes pulse-slow {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.6; }
  }

  .animate-pulse-slow {
    animation: pulse-slow 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Remove unused animations from previous version */
</style>

<script>
  import { currentLanguage } from '../../stores/languageStore';
  import { translations } from '../../utils/translations';

  function updateContent(lang) {
    const t = translations[lang].features.architecture;

    // Update header content
    document.getElementById('architecture-label').textContent = t.label;
    document.getElementById('architecture-title').textContent = t.title;
    document.getElementById('architecture-description').textContent = t.description;

    // Update edge devices content
    document.getElementById('title-edge').textContent = t.edge.title;
    document.getElementById('description-edge').textContent = t.edge.description;
    t.edge.items.forEach((item, index) => {
      document.getElementById(`item-edge-${index}`).textContent = item;
    });

    // Update network layer content
    document.getElementById('title-network').textContent = t.network.title;
    document.getElementById('description-network').textContent = t.network.description;
    t.network.items.forEach((item, index) => {
      document.getElementById(`item-network-${index}`).textContent = item;
    });

    // Update control center content
    document.getElementById('title-control').textContent = t.control.title;
    document.getElementById('description-control').textContent = t.control.description;
    t.control.items.forEach((item, index) => {
      document.getElementById(`item-control-${index}`).textContent = item;
    });
  }

  function initSystemArchitecture() {
    // Initial render
    updateContent(currentLanguage.get());

    // Listen for language changes
    const unsubscribe = currentLanguage.subscribe(newLang => {
      updateContent(newLang);
    });

    return unsubscribe;
  }

  // Handle initial load and page transitions
  document.addEventListener('astro:page-load', () => {
    const unsubscribe = initSystemArchitecture();
    
    // Cleanup on page transition
    document.addEventListener('astro:before-preparation', () => {
      unsubscribe();
    }, { once: true });
  });
</script>