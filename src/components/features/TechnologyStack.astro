---
import { currentLanguage } from '../../stores/languageStore';
import { translations } from '../../utils/translations';

// Initial language value for SSR
const initialLang = currentLanguage.get();

const categories = [
  {
    id: "core",
    gradient: "from-forlux-orange-primary to-forlux-orange-secondary",
    itemCount: 3,
    specCount: 3
  },
  {
    id: "network",
    gradient: "from-forlux-green-primary to-forlux-green-secondary",
    itemCount: 3,
    specCount: 3
  },
  {
    id: "software",
    gradient: "from-forlux-orange-secondary to-forlux-orange-accent",
    itemCount: 3,
    specCount: 3
  }
];

const icons = {
  core: ["⚡", "🔮", "🧠"],
  network: ["🌐", "🔄", "🔒"],
  software: ["💻", "🤖", "🗺️"]
};
---

<section class="relative py-32 bg-slate-900/50" id="technology-stack">
  <div class="container mx-auto px-4">
    <div 
      class="text-center mb-16"
      data-aos="fade-up"
      data-aos-duration="800"
    >
      <span 
        class="inline-block px-4 py-1 text-sm font-medium text-forlux-green-primary bg-forlux-green-primary/10 rounded-full border border-forlux-green-primary/20 mb-4"
        id="tech-stack-label"
      >
        Technology Stack
      </span>
      <h2 
        class="text-4xl font-bold mb-4 bg-clip-text text-transparent bg-forlux-green-gradient"
        id="tech-stack-title"
      >
        Built for Performance
      </h2>
      <p 
        class="text-gray-400 max-w-2xl mx-auto"
        id="tech-stack-description"
      >
        Powered by cutting-edge technology and engineered for reliability
      </p>
    </div>

    <div class="space-y-24">
      {categories.map((category, categoryIndex) => (
        <div 
          class="space-y-12"
          data-aos="fade-up"
          data-aos-duration="1000"
          data-aos-delay={categoryIndex * 200}
        >
          <div class="text-center">
            <h3 
              class={`text-2xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r ${category.gradient}`}
              id={`category-title-${category.id}`}
            >
              Loading...
            </h3>
            <p 
              class="text-gray-400 max-w-2xl mx-auto"
              id={`category-description-${category.id}`}
            >
              Loading...
            </p>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            {Array.from({ length: category.itemCount }).map((_, itemIndex) => (
              <div 
                class="group relative"
                data-aos="zoom-in"
                data-aos-duration="800"
                data-aos-delay={itemIndex * 100}
              >
                <div class={`absolute inset-0 bg-gradient-to-r ${category.gradient} opacity-0 group-hover:opacity-5 transition-all duration-500 rounded-xl blur-xl`}></div>
                
                <div class="glass-card p-6 relative z-10 h-full transition-transform duration-500 group-hover:scale-[1.02]">
                  <div class="relative mb-6">
                    <span class="relative text-4xl block mb-4 transition-transform duration-300 group-hover:scale-110">
                      {icons[category.id][itemIndex]}
                    </span>
                    <h4 
                      class={`text-xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r ${category.gradient} transition-colors duration-300`}
                      id={`item-title-${category.id}-${itemIndex}`}
                    >
                      Loading...
                    </h4>
                    <p 
                      class="text-gray-400 text-sm"
                      id={`item-description-${category.id}-${itemIndex}`}
                    >
                      Loading...
                    </p>
                  </div>

                  <ul class="space-y-3">
                    {Array.from({ length: category.specCount }).map((_, specIndex) => (
                      <li 
                        class="flex items-center text-sm text-gray-400 transform translate-x-0 group-hover:translate-x-2 transition-all duration-300"
                        style={{
                          transitionDelay: `${specIndex * 50}ms`
                        }}
                        id={`spec-${category.id}-${itemIndex}-${specIndex}`}
                      >
                        <div class="relative">
                          <div class={`absolute inset-0 bg-gradient-to-r ${category.gradient} opacity-20 rounded-full blur group-hover:opacity-50 transition-opacity duration-300`}></div>
                          <div class={`w-1.5 h-1.5 rounded-full bg-gradient-to-r ${category.gradient} relative z-10`}></div>
                        </div>
                        <span class="ml-2">Loading...</span>
                      </li>
                    ))}
                  </ul>

                  <div class={`absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r ${category.gradient} opacity-0 group-hover:opacity-20 transition-all duration-500 transform scale-x-0 group-hover:scale-x-100 origin-left rounded-full`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  import { currentLanguage } from '../../stores/languageStore';
  import { translations } from '../../utils/translations';

  function updateContent(lang) {
    const t = translations[lang].features.technology;

    // Update header content
    document.getElementById('tech-stack-label').textContent = t.label;
    document.getElementById('tech-stack-title').textContent = t.title;
    document.getElementById('tech-stack-description').textContent = t.description;

    // Update categories
    ['core', 'network', 'software'].forEach(categoryId => {
      const category = t[categoryId];
      
      // Update category headers
      document.getElementById(`category-title-${categoryId}`).textContent = category.title;
      document.getElementById(`category-description-${categoryId}`).textContent = category.description;

      // Update items
      category.items.forEach((item, itemIndex) => {
        document.getElementById(`item-title-${categoryId}-${itemIndex}`).textContent = item.name;
        document.getElementById(`item-description-${categoryId}-${itemIndex}`).textContent = item.description;
        
        // Update specs
        item.specs.forEach((spec, specIndex) => {
          document.getElementById(`spec-${categoryId}-${itemIndex}-${specIndex}`).querySelector('span').textContent = spec;
        });
      });
    });
  }

  function initTechnologyStack() {
    // Initial render
    updateContent(currentLanguage.get());

    // Listen for language changes
    const unsubscribe = currentLanguage.subscribe(newLang => {
      updateContent(newLang);
    });

    // Cleanup subscription when component is destroyed
    return unsubscribe;
  }

  // Handle initial load and page transitions
  document.addEventListener('astro:page-load', () => {
    const unsubscribe = initTechnologyStack();
    
    // Cleanup on page transition
    document.addEventListener('astro:before-preparation', () => {
      unsubscribe();
    }, { once: true });
  });
</script>