---
import { currentLanguage } from '../../stores/languageStore';
import { translations } from '../../utils/translations';
import ModularAnimation from './animations/ModularAnimation';
import DetectionAnimation from './animations/DetectionAnimation';
import CommandAnimation from './animations/CommandAnimation';

// Initial language value for SSR
const initialLang = currentLanguage.get();

const features = [
  {
    id: "modular",
    icon: "🔄",
    gradient: "from-forlux-orange-primary to-forlux-orange-secondary",
    stats: [
      { id: "downtime", value: "0" },
      { id: "swap", value: "< 30s" }
    ],
    animation: "modular"
  },
  {
    id: "detection",
    icon: "👁️",
    gradient: "from-forlux-green-primary to-forlux-green-secondary",
    stats: [
      { id: "detection", value: "98%" },
      { id: "response", value: "< 3s" }
    ],
    animation: "detection"
  },
  {
    id: "command",
    icon: "🌍",
    gradient: "from-forlux-orange-secondary to-forlux-orange-accent",
    stats: [
      { id: "coverage", value: "100%" },
      { id: "updates", value: "Real-time" }
    ],
    animation: "command"
  }
];
---

<section class="relative py-32 feature-section" id="feature-showcase">
  <div class="container mx-auto px-4">
    {features.map((feature, index) => (
      <div 
        class="mb-32 last:mb-0 feature-item"
        data-feature-index={index}
      >
        <div class="glass-card p-8 relative overflow-hidden feature-card">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
            <div class="space-y-6 feature-content">
              <div class="flex items-center space-x-4 feature-header">
                <span class="text-4xl">{feature.icon}</span>
                <h3 
                  class={`text-2xl font-bold bg-gradient-to-r ${feature.gradient} bg-clip-text text-transparent`}
                  id={`title-${feature.id}`}
                >
                  Loading...
                </h3>
              </div>
              
              <p 
                class="text-gray-400 leading-relaxed feature-description"
                id={`description-${feature.id}`}
              >
                Loading...
              </p>

              <div class="flex space-x-8 feature-stats">
                {feature.stats.map(stat => (
                  <div class="stat-item">
                    <div class={`text-2xl font-bold bg-gradient-to-r ${feature.gradient} bg-clip-text text-transparent`}>
                      {stat.value}
                    </div>
                    <div 
                      class="text-sm text-gray-400"
                      id={`stat-${feature.id}-${stat.id}`}
                    >
                      Loading...
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div class="relative h-[400px] bg-slate-900/50 rounded-lg overflow-hidden feature-animation">
              {feature.animation === "modular" && (
                <ModularAnimation client:visible />
              )}
              {feature.animation === "detection" && (
                <DetectionAnimation client:visible />
              )}
              {feature.animation === "command" && (
                <CommandAnimation client:visible />
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  .feature-section {
    opacity: 0;
  }

  .feature-item {
    opacity: 0;
    transform: translateY(50px);
  }

  .feature-card {
    transform: translateY(30px);
    opacity: 0;
  }

  .feature-content {
    transform: translateX(-30px);
    opacity: 0;
  }

  .feature-animation {
    transform: translateX(30px);
    opacity: 0;
  }

  .stat-item {
    opacity: 0;
    transform: translateY(20px);
  }
</style>

<script>
  import { currentLanguage } from '../../stores/languageStore';
  import { translations } from '../../utils/translations';
  import gsap from 'gsap';
  import ScrollTrigger from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  function updateContent(lang) {
    const t = translations[lang].features.showcase;

    // Update modular feature
    document.getElementById('title-modular').textContent = t.modular.title;
    document.getElementById('description-modular').textContent = t.modular.description;
    document.getElementById('stat-modular-downtime').textContent = t.modular.stats.downtime;
    document.getElementById('stat-modular-swap').textContent = t.modular.stats.swap;

    // Update detection feature
    document.getElementById('title-detection').textContent = t.detection.title;
    document.getElementById('description-detection').textContent = t.detection.description;
    document.getElementById('stat-detection-detection').textContent = t.detection.stats.detection;
    document.getElementById('stat-detection-response').textContent = t.detection.stats.response;

    // Update command feature
    document.getElementById('title-command').textContent = t.command.title;
    document.getElementById('description-command').textContent = t.command.description;
    document.getElementById('stat-command-coverage').textContent = t.command.stats.coverage;
    document.getElementById('stat-command-updates').textContent = t.command.stats.updates;
  }

  function initAnimations() {
    // Initial section reveal
    gsap.to('.feature-section', {
      opacity: 1,
      duration: 1,
      ease: 'power2.out'
    });

    // Animate each feature card
    gsap.utils.toArray<HTMLElement>('.feature-item').forEach((item, i) => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: item,
          start: 'top 80%',
          end: 'center center',
          scrub: 1,
          toggleActions: 'play reverse play reverse'
        }
      });

      // Card container animation
      tl.to(item.querySelector('.feature-card'), {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: 'power3.out'
      })

      // Content side animation
      .to(item.querySelector('.feature-content'), {
        x: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out'
      }, '-=0.4')

      // Stats animation with stagger
      .to(item.querySelectorAll('.stat-item'), {
        y: 0,
        opacity: 1,
        duration: 0.4,
        stagger: 0.1,
        ease: 'back.out(1.7)'
      }, '-=0.2')

      // Animation side
      .to(item.querySelector('.feature-animation'), {
        x: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out'
      }, '-=0.4');

      // Add hover animation
      item.addEventListener('mouseenter', () => {
        gsap.to(item.querySelector('.feature-card'), {
          y: -10,
          duration: 0.3,
          ease: 'power2.out'
        });
      });

      item.addEventListener('mouseleave', () => {
        gsap.to(item.querySelector('.feature-card'), {
          y: 0,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    });

    return () => {
      ScrollTrigger.getAll().forEach(st => st.kill());
    };
  }

  function initFeatureShowcase() {
    updateContent(currentLanguage.get());
    const cleanupAnimations = initAnimations();
    const unsubscribe = currentLanguage.subscribe(newLang => {
      updateContent(newLang);
    });

    return () => {
      cleanupAnimations();
      unsubscribe();
    };
  }

  document.addEventListener('astro:page-load', () => {
    const cleanup = initFeatureShowcase();
    
    document.addEventListener('astro:before-preparation', () => {
      cleanup();
    }, { once: true });
  });
</script>